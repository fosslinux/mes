#! /bin/sh
# -*-scheme-*-
exec ${MES-bin/mes} --no-auto-compile -L ${0%/*} -L module -C module -e '(tests let)' -s "$0" "$@"
!#

;;; -*-scheme-*-

;;; GNU Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2018 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of GNU Mes.
;;;
;;; GNU Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; GNU Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with GNU Mes.  If not, see <http://www.gnu.org/licenses/>.

(define-module (tests let)
  #:use-module (mes mes-0)
  #:use-module (mes test))

(mes-use-module (mes let))
(mes-use-module (mes test))

(pass-if "first dummy" #t)
(pass-if-not "second dummy" #f)

(pass-if-equal "let " 1
  (let ((x 1)) 1))

(let () (define *let-define* '*let-define*) #f)
(pass-if-equal "let define "
    #f
    (and (defined? '*let-define*) *let-define*))

(begin (define *begin-define* '*begin-define*) #f)
(pass-if-equal "begin define" '*begin-define*
               (and (defined? '*begin-define*) *begin-define*))

(pass-if-equal "let loop" '(3 2 1)
  (let loop ((lst '(3 2 1)))
    (cond ((null? lst) '())
          (#t (cons (car lst) (loop (cdr lst)))))))

(pass-if-equal "let* comments" 5
  (let* ((aa 2)
         (bb (+ aa 3))
         #! boo !#
         ;;(bb 4)
         )
    bb))

(pass-if-equal "letrec" 24
  (letrec ((factorial (lambda (n)
                        (cond ((= n 1) 1)
                              (#t (* n (factorial (- n 1))))))))
    (factorial 4)))

(result 'report)
