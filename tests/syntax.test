#! /bin/sh
# -*-scheme-*-
exec ${MES-bin/mes} --no-auto-compile -L ${0%/*} -L module -C module -e '(tests syntax)' -s "$0" "$@"
!#

;;; -*-scheme-*-

;;; GNU Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2017,2018 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of GNU Mes.
;;;
;;; GNU Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; GNU Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with GNU Mes.  If not, see <http://www.gnu.org/licenses/>.

(define-module (tests syntax)
  #:use-module (mes mes-0)
  #:use-module (mes test))

(mes-use-module (mes test))
(mes-use-module (mes syntax))

(pass-if "first dummy" #t)
(pass-if-not "second dummy" #f)

(define-syntax sr:when
  (syntax-rules ()
    ((sr:when condition exp ...)
     (if condition
         (begin exp ...)))))

(sr:when #t
         (display "hallo\n")
         (display "daar\n"))


;; FIXME: macro inside let
(define-syntax sr:when
  (syntax-rules ()
    ((sc:when condition exp ...)
     (if condition
         (begin exp ...)))))

(pass-if "define-syntax when"
  (sequal?
   (let ()
     (define-syntax sr:when
       (syntax-rules ()
         ((sc:when condition exp ...)
          (if condition
              (begin exp ...)))))
     (let ()
       (sr:when #t "if not now, then?")))
   "if not now, then?"))

;; FIXME: macro inside let
(define-syntax-rule (sre:when c e ...)
  (if c (begin e ...)))

(pass-if "define-syntax-rule"
  (sequal?
   (let ()
     (define-syntax-rule (sre:when c e ...)
       (if c (begin e ...)))
     (let ()
       (sre:when #t "if not now, then?")))
   "if not now, then?"))

(pass-if-equal "syntax-rules plus"
    (+ 1 2 3)
  (let ()
    (define-syntax plus
      (syntax-rules ()
        ((plus x ...) (+ x ...))))
    (plus 1 2 3)))

(result 'report)
