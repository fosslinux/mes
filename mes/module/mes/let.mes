;;; -*-scheme-*-

;;; GNU Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2018 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of GNU Mes.
;;;
;;; GNU Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; GNU Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with GNU Mes.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; let.mes is loaded after base and quasiquote.  It provides
;;; let, let* and named let.

;;; Code:

(mes-use-module (mes base))
(mes-use-module (mes quasiquote))

(define-macro (simple-let bindings . rest)
  (cons (cons 'lambda (cons (map1 car bindings) rest))
        (map1 cadr bindings)))

(define-macro (xsimple-let bindings rest)
  `(,`(lambda ,(map1 car bindings) ,@rest)
    ,@(map1 cadr bindings)))

(define-macro (xnamed-let name bindings rest)
  `(simple-let ((,name *unspecified*))
     (set! ,name (lambda ,(map1 car bindings) ,@rest))
     (,name ,@(map1 cadr bindings))))

(define-macro (let bindings-or-name . rest)
  (if (symbol? bindings-or-name)
      `(xnamed-let ,bindings-or-name ,(car rest) ,(cdr rest))
      `(xsimple-let ,bindings-or-name ,rest)))

(define (expand-let* bindings body)
  (if (null? bindings)
      `((lambda () ,@body))
      `((lambda (,(caar bindings))
          ,(expand-let* (cdr bindings) body))
        ,@(cdar bindings))))

(define-macro (let* bindings . body)
  (expand-let* bindings body))

(define (unspecified-bindings bindings params)
  (if (null? bindings) params
      (unspecified-bindings
       (cdr bindings)
       (append params (cons (cons (caar bindings) '(*unspecified*)) '())))))

(define (letrec-setters bindings setters)
  (if (null? bindings) setters
      (letrec-setters (cdr bindings)
                      (append setters
                              (cons (cons 'set! (car bindings)) '())))))

(define-macro (letrec bindings . body)
  `(let ,(unspecified-bindings bindings '())
     ,@(letrec-setters bindings '())
     ,@body))
